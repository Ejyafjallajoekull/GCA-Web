# Routes

# Home page (redirect to last conference)
GET           /                                               controllers.Application.index
GET           /contact                                        controllers.Application.contact
GET           /impressum                                      controllers.Application.impressum
GET           /about                                          controllers.Application.about

GET           /dashboard/conference                           controllers.Application.createConference()
GET           /dashboard/conference/:id                       controllers.Application.adminConference(id: String)
GET           /dashboard/conference/:id/abstracts             controllers.Application.adminAbstracts(id: String)
GET           /dashboard/accounts                             controllers.Application.adminAccounts()

GET           /conferences                                    controllers.Application.conferences()
GET           /conference/:id                                 controllers.Application.conference(id: String)
GET           /conference/:id/submission                      controllers.Application.submission(id: String)
GET           /conference/:id/abstracts                       controllers.Application.abstractsPublic(id: String)
GET           /myabstracts                                    controllers.Application.abstractsPrivate()
GET           /myabstracts/:id/edit                           controllers.Application.edit(id: String)
GET           /submitted                                      controllers.Application.abstractsPending()

GET           /abstracts/:id                                  controllers.Application.viewAbstract(id: String)


# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                   controllers.Assets.at(path="/public", file)

# API ------------------------------------------------------------------------------------------------------------------
# Conference interface
POST          /api/conferences                                controllers.api.Conferences.create()
GET           /api/conferences                                controllers.api.Conferences.list()
GET           /api/conferences/:id                            controllers.api.Conferences.get(id: String)
PUT           /api/conferences/:id                            controllers.api.Conferences.update(id: String)
DELETE        /api/conferences/:id                            controllers.api.Conferences.delete(id: String)
POST          /api/conferences/:id/abstracts                  controllers.api.Abstracts.create(id: String)
GET           /api/conferences/:id/abstracts                  controllers.api.Abstracts.listByConference(id: String)
GET           /api/conferences/:id/allAbstracts               controllers.api.Abstracts.listAllByConference(id: String)
PUT           /api/conferences/:id/owners                     controllers.api.Conferences.setPermissions(id: String)
GET           /api/conferences/:id/owners                     controllers.api.Conferences.getPermissions(id: String)

# Abstract interface
GET           /api/abstracts/:id                              controllers.api.Abstracts.get(id: String)
PUT           /api/abstracts/:id                              controllers.api.Abstracts.update(id: String)
DELETE        /api/abstracts/:id                              controllers.api.Abstracts.delete(id: String)
PATCH         /api/abstracts/:id                              controllers.api.Abstracts.patch(id: String)
POST          /api/abstracts/:id/figures                      controllers.api.Figures.upload(id: String)
GET           /api/abstracts/:id/figures                      controllers.api.Figures.list(id: String)
PUT           /api/abstracts/:id/owners                       controllers.api.Abstracts.setPermissions(id: String)
GET           /api/abstracts/:id/owners                       controllers.api.Abstracts.getPermissions(id: String)
GET           /api/abstracts/:id/stateLog                     controllers.api.Abstracts.listState(id: String)
PUT           /api/abstracts/:id/state                        controllers.api.Abstracts.setState(id: String)

# Figure interface
GET           /api/figures/:id/image                          controllers.api.Figures.download(id: String)
DELETE        /api/figures/:id                                controllers.api.Figures.delete(id: String)

# [...] maybe add more figure functions

# Account interface

GET           /api/users                                      controllers.api.Accounts.accountsByEmail(email: String)
GET           /api/user/list                                  controllers.api.Accounts.listAccounts()
GET           /api/user/:id/abstracts                         controllers.api.Abstracts.listByAccount(id: String)
GET           /api/user/self/conferences/:id/abstracts        controllers.api.Abstracts.listOwn(id: String)
GET           /api/user/self/conferences                      controllers.api.Conferences.listWithOwnAbstracts()
GET           /secret                                         controllers.Application.showSecret

# Auth -----------------------------------------------------------------------------------------------------------------
# Login page
GET           /login                                          securesocial.controllers.LoginPage.login
GET           /logout                                         securesocial.controllers.LoginPage.logout

# User Registration and password handling
GET           /signup                                         securesocial.controllers.Registration.startSignUp
POST          /signup                                         securesocial.controllers.Registration.handleStartSignUp
GET           /signup/:token                                  securesocial.controllers.Registration.signUp(token)
POST          /signup/:token                                  securesocial.controllers.Registration.handleSignUp(token)
GET           /reset                                          securesocial.controllers.Registration.startResetPassword
POST          /reset                                          securesocial.controllers.Registration.handleStartResetPassword
GET           /reset/:token                                   securesocial.controllers.Registration.resetPassword(token)
POST          /reset/:token                                   securesocial.controllers.Registration.handleResetPassword(token)
GET           /password                                       securesocial.controllers.PasswordChange.page
POST          /password                                       securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET           /authenticate/:provider                         securesocial.controllers.ProviderController.authenticate(provider)
POST          /authenticate/:provider                         securesocial.controllers.ProviderController.authenticateByPost(provider)
GET           /not-authorized                                 securesocial.controllers.ProviderController.notAuthorized
